<?php

namespace App\Http\Controllers\Backend;

use App\Http\Controllers\Controller;
use App\Http\Requests\Backend\{{storeRequestName}};
use App\Http\Requests\Backend\{{updateRequestName}};
use App\Models\{{modelName}};
use App\Repositories\{{repositoryName}};
use App\Services\Backend\{{serviceName}};
use App\Tables\{{tableClassName}};
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use ProtoneMedia\Splade\Facades\Toast;

class {{controllerName}} extends Controller
{
    protected {{serviceName}} ${{serviceVariable}};
    protected {{repositoryName}} $repository;

    public function __construct({{serviceName}} ${{serviceVariable}},{{repositoryName}} $repository )
    {
        $this->{{serviceVariable}} = ${{serviceVariable}};
        $this->repository = $repository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return Application|Factory|View
     */
    public function index(): Application|Factory|View
    {
        return view('backend.pages.{{viewsFolderName}}.index', [
            '{{modelVariablePlural}}' => {{tableClassName}}::class,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Application|Factory|View
     */
    public function create(): Application|Factory|View
    {
        return view('backend.pages.{{viewsFolderName}}.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{storeRequestName}} $request
     * @return RedirectResponse
     */
    public function store({{storeRequestName}} $request): RedirectResponse
    {
        try {
            $this->{{serviceVariable}}->create($request->validated());
            Toast::title('{{modelName}} created successfully')->autoDismiss(5);
            return redirect()->route('{{viewsFolderNamePlural}}.index');
        } catch (\Exception $e) {
            Toast::warning()->title('Error creating {{modelName}}: ' . $e->getMessage())->autoDismiss(5);
            return redirect()->back();
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int ${{modelVariable}}
     * @return Application|Factory|View
     */
    public function edit(int ${{modelVariable}}): Application|Factory|View
    {
        return view('backend.pages.{{viewsFolderName}}.edit', [
            '{{modelVariable}}' => $this->repository->find(${{modelVariable}})
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{updateRequestName}} $request
     * @param {{modelName}} ${{modelVariable}}
     * @return RedirectResponse
     */
    public function update({{updateRequestName}} $request, {{modelName}} ${{modelVariable}}): RedirectResponse
    {
        try {
            $this->{{serviceVariable}}->update(${{modelVariable}}->id, $request->validated());
            Toast::title('{{modelName}} updated successfully')->autoDismiss(5);
            return redirect()->route('{{viewsFolderNamePlural}}.index');
        } catch (\Exception $e) {
            Toast::warning()->title('Error updating {{modelName}}: ' . $e->getMessage())->autoDismiss(5);
            return redirect()->back();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{modelName}} ${{modelVariable}}
     * @return RedirectResponse
     */
    public function destroy({{modelName}} ${{modelVariable}}): RedirectResponse
    {
        try {
            $this->{{serviceVariable}}->destroy(${{modelVariable}}->id);
            Toast::title('{{modelName}} deleted successfully')->autoDismiss(5);
            return redirect()->route('{{viewsFolderNamePlural}}.index');
        } catch (\Exception $e) {
            Toast::warning()->title('Error deleting {{modelName}}: ' . $e->getMessage())->autoDismiss(5);
            return redirect()->back();
        }
    }
}
